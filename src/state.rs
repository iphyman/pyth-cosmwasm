use {
    cosmwasm_schema::cw_serde,
    cosmwasm_std::{Addr, Binary},
    cw_storage_plus::Item,
    std::collections::HashSet,
};

/// A `PythDataSource` identifies a specific contract (given by its Wormhole `emitter`) on
/// a specific blockchain (given by `chain_id`).
#[cw_serde]
#[derive(Eq, Hash)]
pub struct PythDataSource {
    pub emitter: Binary,
    pub chain_id: u16,
}

#[cw_serde]
pub struct ConfigInfo {
    pub wormhole_contract: Addr,
    pub data_sources: HashSet<PythDataSource>,
    pub governance_source: PythDataSource,
    // Index for preventing replay attacks on governance data source transfers.
    // This index increases every time the governance data source is changed, which prevents old
    // transfer request VAAs from being replayed.
    pub governance_source_index: u32,
    // The wormhole sequence number for governance messages. This value is increased every time the
    // a governance instruction is executed.
    //
    // This field differs from the one above in that it is generated by wormhole and applicable to all
    // governance messages, whereas the one above is generated by Pyth and only applicable to governance
    // source transfers.
    pub governance_sequence_number: u64,
    // Warning: This id needs to agree with the wormhole chain id.
    // We should read this directly from wormhole, but their contract doesn't expose it.
    pub chain_id: u16,
}

pub const CONFIG: Item<ConfigInfo> = Item::new("config");
